                                P0: Worst Case Time Complexity of all Tasks
                        
Task 0:
------

Both calls.csv and texts.csv are read in the form of python list, which is internally implemented as dynamic array. 
Their elements can be accessed in O(1) worst case. So, accessing the first record of texts and last record 
of calls, each takes O(1). Therefore, total time complexity is O(1) i.e. constant time.

Task 1:
------

1. Lines 22 to 27 is iterating over records and appending phone numbers into a list 
called 'phone_num_list'. Assuming we have M text records and N call records, this step would take O(M+N) (appending 
element to python list is O(1))

2. Line 29 is converting the 'phone_num_list' to a set, which takes O(M+N) as well (length of phone_num_list 
is 2*M + 2*N and each set insertion operation takes O(1))

3. Line 31 is finding and printing the length of set, which also takes O(1)

Total time complexity: O(M+N)

Task 2:
------

1. Lines 25 to 29 is updating defaultdict, 'phone_num_to_time' to store the map from phone-number to corresponding 
time-spent-on-phone. Assuming there are M call records, and in the worst case, there could 2*M disinct phone numbers.
This operation would take O(2*M) or O(M) as in defaultdict, updating and constructing a new element, each takes O(1)

2. Line 31-36 is iterating over the (phone_number, time_spent) pairs in dictionary and finding the maximum time spent 
and corresponding phone number, which is O(M)

3. Lines 37 is printing the required message, which is O(1)

Total time complexity: O(M)

Task 3:
------

1. Lines 47 to 67 is iterating over call records, performing string opertions to filter out code within each iteration, 
addding the filtered out code to the set of codes and updating the counter variables. Assuming there are M call records, 
total time complexity of this bit would be O(M) (as each set addtion is O(1))

2. Lines 70 to 73 (Part A), sorts the set of codes -- O(MlogM) and prints them in order -- O(M). 

3. Lines 76 to 77 (Part B) computes the required metric and prints it -- O(1)

Total time complexity: O(MlogM)

Task 4:
------

1. Lines 28 to 38 is iterating over text and call records and adding the phone numbers to one of three sets, 'outgoing_callers',
'call_receivers' or 'texters'. Since, adding to set id O(1), this entire bit would take O(2*N+2*M) or O(M+N) assuming there 
are N text records and M call records.

2. Lines 40 to 41 is updating the 'outgoing_callers' set by subtracting from it the other two sets: 'call_receivers' and
'texters'. Since, set1.difference_update(set2) takes O(len(set2)), this operation in the worst case would take O(M+N)
which would happen if all call receivers and texters were distinct phone numbers. 

3. Line 42 is sorting the updated 'outgoing_callers' which are nothing but probable telemarketers in lexicographic order
using sorted -- O(MlogM) in the worst case, which would happen if 'outgoing_callers' had length of M, i.e., there was no 
overlap between 'outgoing_callers' and the other two sets: 'call_receivers' and 'texters'.

4. Lines 44 to 46 is printing the final list -- O(M) worst case.

Total time complexity is O(MlogM + N)




